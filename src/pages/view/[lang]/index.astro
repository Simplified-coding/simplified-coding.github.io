---
import Layout from "../../../layouts/Layout.astro";
import { getHtmlLessonLink } from "../../../lib/api";

const lesson = getHtmlLessonLink(
  Astro.params.lang!,
  Number(Astro.url.searchParams.get("lesson"))
);
---

<!--
SPDX-FileCopyrightText: 2024 The Simplified Coding Team <main@simplifiedcoding.org>

SPDX-License-Identifier: GPL-3.0-only
-->
<Layout>
  <div style="color: white;" id="viewLesson">
    <div>
      <div>
        <div class="d-flex justify-content-center">
          <h1>
            Προεσκόπιση Μαθήματος - {Astro.params.lang?.toUpperCase()}
            <button
              class="btn btn-primary"
              style="padding: 0.7rem 0.5rem 0.7rem 0.5rem"
              id="print"
              >Εκτύπωση
            </button>
            <button
              class="btn btn-primary"
              style="padding: 0.7rem 0.5rem 0.7rem 0.5rem"
              id="save"
              >Κατέβασμα MD
            </button>
            <button
              class="btn btn-primary"
              style="padding: 0.7rem 0.5rem 0.7rem 0.5rem"
              id="save-docx"
              >Κατέβασμα DOCX
            </button>
          </h1>
        </div>
        <div class="d-flex justify-content-center">
          <div style="background-color: #ffffff; width: 60vw; height: 100vh">
            <iframe width="100%" height="100%" id="if" src={lesson}></iframe>
          </div>
        </div>
      </div>
    </div>
  </div>
  <br />
</Layout>

<script>
  import { addLesson } from "../../../lib/lessonTracking";
  import { unified } from "unified";
  import markdown from "remark-parse";
  import docx from "remark-docx";
  import { stripHtml } from "string-strip-html";
  import { getRawLesson } from "../../../lib/api";

  const printBTN = document.getElementById("print");
  const saveBTN = document.getElementById("save");
  const saveDOCX = document.getElementById("save-docx");

  // Set IFrame Style
  window.onload = () => {
    const iframe = document.getElementById("if") as HTMLIFrameElement;
    const style = document.createElement("style");
    style.innerHTML = `
        * {
            color: white;
        }
        `;
    iframe.contentDocument?.body.appendChild(style);

    const course = location.pathname.split("/")[2];
    const lesson = new URLSearchParams(location.search).get("lesson");
    window.umami.track(`View Language: ${course} (Lesson ${lesson})`);
  };

  printBTN?.addEventListener("click", () => {
    const course = location.pathname.split("/")[2];
    const lesson = new URLSearchParams(location.search).get("lesson");
    window.umami.track(`Triggered Print of ${course}/${lesson}`);
    
    const iframe = document.getElementById("if") as HTMLIFrameElement;
    iframe.contentWindow?.print();
  });

  saveBTN?.addEventListener("click", () => {
    const course = location.pathname.split("/")[2];
    const lesson = new URLSearchParams(location.search).get("lesson");
    window.umami.track(`Triggered Markdown Save of ${course}/${lesson}`);
        
    const a = document.createElement("a");
    a.download = `${course}-${lesson}.md`;
    a.href = window.URL.createObjectURL(
      new Blob(
        [
          `https://raw.githubusercontent.com/simplified-coding/simplified-coding/main/src/pages/lessons/${course}/${lesson}.mdx`,
        ],
        {
          type: "text/markdown",
        }
      )
    );
    a.click();
  });

  saveDOCX?.addEventListener("click", async () => {
    const course = location.pathname.split("/")[2];
    const lesson = new URLSearchParams(location.search).get("lesson");
    const proc = unified().use(markdown).use(docx, { output: "blob" });
    const text = await getRawLesson(course, Number(lesson));
        
    window.umami.track(`Triggered DOCX Save of ${course}/${lesson}`);

    const doc = await proc.process(stripHtml(text).result);
    const a = document.createElement("a");
    a.download = `${course}-${lesson}.docx`;
    a.href = window.URL.createObjectURL((await doc.result) as Blob);
    a.click();
  });

  addLesson();
</script>
